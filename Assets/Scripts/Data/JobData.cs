using Unity.Collections;
using UnityEngine;

namespace Data
{
    // A job-safe representation of BiomeAttributes
    public struct BiomeAttributesJobData
    {
        public int offset;
        public float scale;
        public int terrainHeight;
        public float terrainScale;
        public byte surfaceBlock;
        public byte subSurfaceBlock;
        public bool placeMajorFlora;
        public int majorFloraIndex;
        public float majorFloraZoneScale;
        public float majorFloraZoneThreshold;
        public float majorFloraPlacementScale;
        public float majorFloraPlacementThreshold;
        public int maxHeight;
        public int minHeight;

        
        public int lodeStartIndex;
        public int lodeCount;
    }

    // A job-safe representation of Lode
    public struct LodeJobData
    {
        public byte blockID;
        public int minHeight;
        public int maxHeight;
        public float scale;
        public float threshold;
        public float noiseOffset;
    }

    // A job-safe representation of BlockType properties needed for meshing and lighting
    public struct BlockTypeJobData
    {
        public bool isSolid;
        public bool renderNeighborFaces;
        public bool isWater;
        public byte opacity;
        public bool isActive;

        // We can't pass the mesh data directly, but we can pass texture IDs
        public int backFaceTexture;
        public int frontFaceTexture;
        public int topFaceTexture;
        public int bottomFaceTexture;
        public int leftFaceTexture;
        public int rightFaceTexture;
    }

    // A container for the mesh data generated by the job
    public struct MeshDataJobOutput
    {
        // Using NativeLists because we don't know the size beforehand
        public NativeList<Vector3> vertices;
        public NativeList<int> triangles;
        public NativeList<int> transparentTriangles;
        public NativeList<int> waterTriangles;
        public NativeList<Vector2> uvs;
        public NativeList<Color> colors;
        public NativeList<Vector3> normals;

        public MeshDataJobOutput(Allocator allocator)
        {
            vertices = new NativeList<Vector3>(allocator);
            triangles = new NativeList<int>(allocator);
            transparentTriangles = new NativeList<int>(allocator);
            waterTriangles = new NativeList<int>(allocator);
            uvs = new NativeList<Vector2>(allocator);
            colors = new NativeList<Color>(allocator);
            normals = new NativeList<Vector3>(allocator);
        }

        public void Dispose()
        {
            vertices.Dispose();
            triangles.Dispose();
            transparentTriangles.Dispose();
            waterTriangles.Dispose();
            uvs.Dispose();
            colors.Dispose();
            normals.Dispose();
        }
    }
}